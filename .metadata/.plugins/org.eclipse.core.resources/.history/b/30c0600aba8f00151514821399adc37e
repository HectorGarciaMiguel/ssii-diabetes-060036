package com.example.seguimientodiabetes;

import java.util.Arrays;

import com.androidplot.xy.LineAndPointFormatter;
import com.androidplot.xy.SimpleXYSeries;
import com.androidplot.xy.XYPlot;
import com.androidplot.xy.XYSeries;
import com.seguimientodiabetes.seguimientodiabetes.R;
import android.app.Activity;
import android.graphics.Color;
import android.os.Bundle;
import android.view.Menu;


public class MostrarActividadesGraficaActivity extends Activity {

	
    private XYPlot mySimpleXYPlot;

	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_mostrar_actividades_grafica);
		
		
		 // Inicializamos el objeto XYPlot búscandolo desde el layout:
        mySimpleXYPlot = (XYPlot) findViewById(R.id.mySimpleXYPlot);
 
        // Creamos dos arrays de prueba. En el caso real debemos reemplazar
        // estos datos por los que realmente queremos mostrar
        Number[] series1Numbers = {1, 8, 5, 2, 7, 4};
        Number[] series2Numbers = {4, 6, 3, 8, 2, 10};
 
        // Añadimos Línea Número UNO:
        XYSeries series1 = new SimpleXYSeries(
                Arrays.asList(series1Numbers),  // Array de datos
                SimpleXYSeries.ArrayFormat.Y_VALS_ONLY, // Sólo valores verticales
                "Series1"); // Nombre de la primera serie
 
        // Repetimos para la segunda serie
        XYSeries series2 = new SimpleXYSeries(Arrays.asList(series2Numbers
), SimpleXYSeries.ArrayFormat.Y_VALS_ONLY, "Series2");
 
        // Modificamos los colores de la primera serie
        LineAndPointFormatter series1Format = new LineAndPointFormatter(
                Color.rgb(0, 200, 0),                   // Color de la línea
                Color.rgb(0, 100, 0),                   // Color del punto
                Color.rgb(150, 190, 150));              // Relleno
 
        // Una vez definida la serie (datos y estilo), la añadimos al panel
        mySimpleXYPlot.addSeries(series1, series1Format);
 
        // Repetimos para la segunda serie
        mySimpleXYPlot.addSeries(series2, new LineAndPointFormatter
(Color.rgb(0, 0, 200), Color.rgb(0, 0, 100), Color.rgb(150, 150, 190)));
 
		
	}
	
		
     // Definition of the touch states
        static final int NONE = 0;
        static final int ONE_FINGER_DRAG = 1;
        static final int TWO_FINGERS_DRAG = 2;
        int mode = NONE;
     
        PointF firstFinger;
        float lastScrolling;
        float distBetweenFingers;
        float lastZooming;
     
        @Override
        public boolean onTouch(View arg0, MotionEvent event) {
            switch (event.getAction() & MotionEvent.ACTION_MASK) {
            case MotionEvent.ACTION_DOWN: // Start gesture
                firstFinger = new PointF(event.getX(), event.getY());
                mode = ONE_FINGER_DRAG;
                break;
            case MotionEvent.ACTION_UP: 
            case MotionEvent.ACTION_POINTER_UP:
                //When the gesture ends, a thread is created to give inertia to the scrolling and zoom 
                Timer t = new Timer();
                    t.schedule(new TimerTask() {
                        @Override
                        public void run() {
                            while(Math.abs(lastScrolling)>1f || Math.abs(lastZooming-1)<1.01){ 
                            lastScrolling*=.8;
                            scroll(lastScrolling);
                            lastZooming+=(1-lastZooming)*.2;
                            zoom(lastZooming);
                            mySimpleXYPlot.setDomainBoundaries(minXY.x, maxXY.x, BoundaryMode.AUTO);
                            try {
                                mySimpleXYPlot.postRedraw();
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                            // the thread lives until the scrolling and zooming are imperceptible
                        }
                        }
                    }, 0);
     
            case MotionEvent.ACTION_POINTER_DOWN: // second finger
                distBetweenFingers = spacing(event);
                // the distance check is done to avoid false alarms
                if (distBetweenFingers > 5f) {
                    mode = TWO_FINGERS_DRAG;
                }
                break;
            case MotionEvent.ACTION_MOVE:
                if (mode == ONE_FINGER_DRAG) {
                    PointF oldFirstFinger=firstFinger;
                    firstFinger=new PointF(event.getX(), event.getY());
                    lastScrolling=oldFirstFinger.x-firstFinger.x;
                    scroll(lastScrolling);
                    lastZooming=(firstFinger.y-oldFirstFinger.y)/mySimpleXYPlot.getHeight();
                    if (lastZooming<0)
                        lastZooming=1/(1-lastZooming);
                    else
                        lastZooming+=1;
                    zoom(lastZooming);
                    mySimpleXYPlot.setDomainBoundaries(minXY.x, maxXY.x, BoundaryMode.AUTO);
                    mySimpleXYPlot.redraw();
     
                } else if (mode == TWO_FINGERS_DRAG) {
                    float oldDist =distBetweenFingers; 
                    distBetweenFingers=spacing(event);
                    lastZooming=oldDist/distBetweenFingers;
                    zoom(lastZooming);
                    mySimpleXYPlot.setDomainBoundaries(minXY.x, maxXY.x, BoundaryMode.AUTO);
                    mySimpleXYPlot.redraw();
                }
                break;
            }
            return true;
        }
     
        private void zoom(float scale) {
            float domainSpan = maxXY.x    - minXY.x;
            float domainMidPoint = maxXY.x        - domainSpan / 2.0f;
            float offset = domainSpan * scale / 2.0f;
            minXY.x=domainMidPoint- offset;
            maxXY.x=domainMidPoint+offset;
        }
     
        private void scroll(float pan) {
            float domainSpan = maxXY.x    - minXY.x;
            float step = domainSpan / mySimpleXYPlot.getWidth();
            float offset = pan * step;
            minXY.x+= offset;
            maxXY.x+= offset;
        }
     
        private float spacing(MotionEvent event) {
            float x = event.getX(0) - event.getX(1);
            float y = event.getY(0) - event.getY(1);
            return FloatMath.sqrt(x * x + y * y);
        }
    }
